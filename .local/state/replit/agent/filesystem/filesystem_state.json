{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive School Management System (SMS) built as a SaaS-grade web application. The system is designed to streamline academic operations across multiple schools with features including student/teacher portals, fee collection, performance tracking, attendance management, grading systems, and teacher review platforms. It serves different user roles including super admins, school admins, teachers, students, and parents, each with role-based access controls and customized dashboards.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client is built with **React 18** using **TypeScript** and **Vite** as the build tool. The UI framework is **shadcn/ui** with **Tailwind CSS** for styling, providing a modern, responsive design system. State management is handled through **TanStack Query** for server state and React's built-in state management for local UI state. Routing is implemented using **wouter** for a lightweight client-side routing solution.\n\n## Backend Architecture\nThe server uses **Express.js** with **TypeScript** in an ESM configuration. Session-based authentication is implemented using **express-session** with password hashing via **bcrypt**. The API follows RESTful conventions with structured error handling and request/response logging middleware.\n\n## Database Layer\n**Drizzle ORM** is used with **PostgreSQL** as the primary database, specifically configured for **Neon Database** serverless PostgreSQL. The schema defines comprehensive tables for multi-tenant school management including users, schools, classes, subjects, grades, attendance, teacher reviews, invoices, payments, and notifications. The database design supports role-based access control with enums for user roles, attendance status, payment status, and grade letters.\n\n## Authentication & Authorization\nSession-based authentication with role-based access control (RBAC) supporting multiple user types: super_admin, admin, teacher, student, and parent. Each role has specific permissions and access to different parts of the application. Authentication middleware enforces role-based route protection.\n\n## Multi-tenant Architecture\nThe system supports multiple schools through a school-based tenant separation model. Each school has its own data isolation while sharing the same application instance. The schema includes school references across all relevant entities to ensure proper data separation.\n\n## Component Architecture\nThe frontend follows a modular component structure with shared UI components, role-specific dashboard components, and feature-specific components for attendance tracking, grade management, fee collection, and teacher reviews. Components are built using the composition pattern with proper TypeScript interfaces.\n\n## API Design\nRESTful API endpoints are organized by feature domain (auth, dashboard, students, teachers, grades, attendance, fees, reviews). The API uses consistent response patterns and error handling. Query parameters and request/response validation is implemented using Zod schemas.\n\n# External Dependencies\n\n## Database & ORM\n- **Neon Database** - Serverless PostgreSQL hosting\n- **Drizzle ORM** - Type-safe database operations\n- **@neondatabase/serverless** - Neon database client\n\n## Authentication & Security\n- **bcrypt** - Password hashing\n- **express-session** - Session management\n- **connect-pg-simple** - PostgreSQL session store\n\n## Frontend Libraries\n- **React** - UI framework\n- **TanStack Query** - Server state management\n- **wouter** - Client-side routing\n- **shadcn/ui** - UI component library\n- **Radix UI** - Headless UI primitives\n- **Tailwind CSS** - Utility-first CSS framework\n\n## Build Tools & Development\n- **Vite** - Build tool and dev server\n- **TypeScript** - Type safety\n- **ESBuild** - Production bundling\n- **PostCSS** - CSS processing\n\n## Form Handling & Validation\n- **react-hook-form** - Form state management\n- **@hookform/resolvers** - Form validation\n- **zod** - Schema validation\n\n## Utilities\n- **date-fns** - Date manipulation\n- **clsx** - Conditional CSS classes\n- **class-variance-authority** - Component variants\n- **nanoid** - ID generation\n- **lucide-react** - Icon library","size_bytes":4263},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport session from \"express-session\";\nimport bcrypt from \"bcrypt\";\nimport { insertUserSchema, insertStudentSchema, insertTeacherSchema, insertGradeSchema, insertAttendanceSchema, insertTeacherReviewSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n    userRole?: string;\n  }\n}\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n  role: z.string().optional()\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'dev-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Auth middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n    next();\n  };\n\n  const requireRole = (roles: string[]) => (req: any, res: any, next: any) => {\n    if (!roles.includes(req.session.userRole)) {\n      return res.status(403).json({ error: \"Insufficient permissions\" });\n    }\n    next();\n  };\n\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.verifyPassword(email, password);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      req.session.userId = user.id;\n      req.session.userRole = user.role;\n\n      // Update last login\n      await storage.updateUser(user.id, { lastLogin: new Date() });\n\n      res.json({ \n        user: { \n          id: user.id, \n          email: user.email, \n          name: user.name, \n          role: user.role \n        } \n      });\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid input\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ error: \"Could not log out\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({ \n        user: { \n          id: user.id, \n          email: user.email, \n          name: user.name, \n          role: user.role \n        } \n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // User management routes\n  app.post(\"/api/users\", requireAuth, requireRole(['admin', 'super_admin']), async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.json(user);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid user data\" });\n    }\n  });\n\n  // Student routes\n  app.get(\"/api/students\", requireAuth, async (req, res) => {\n    try {\n      const { classId } = req.query;\n      let students: any[] = [];\n      \n      if (classId) {\n        students = await storage.getStudentsByClass(classId as string);\n      }\n      \n      res.json(students);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch students\" });\n    }\n  });\n\n  app.post(\"/api/students\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const studentData = insertStudentSchema.parse(req.body);\n      const student = await storage.createStudent(studentData);\n      res.json(student);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid student data\" });\n    }\n  });\n\n  app.get(\"/api/students/:id/profile\", requireAuth, async (req, res) => {\n    try {\n      const student = await storage.getStudent(req.params.id);\n      if (!student) {\n        return res.status(404).json({ error: \"Student not found\" });\n      }\n      res.json(student);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch student profile\" });\n    }\n  });\n\n  // Teacher routes\n  app.get(\"/api/teachers\", requireAuth, async (req, res) => {\n    try {\n      const teachers = await storage.getTeachers();\n      res.json(teachers);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch teachers\" });\n    }\n  });\n\n  app.post(\"/api/teachers\", requireAuth, requireRole(['admin']), async (req, res) => {\n    try {\n      const teacherData = insertTeacherSchema.parse(req.body);\n      const teacher = await storage.createTeacher(teacherData);\n      res.json(teacher);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid teacher data\" });\n    }\n  });\n\n  // Grade routes\n  app.get(\"/api/grades/student/:studentId\", requireAuth, async (req, res) => {\n    try {\n      const grades = await storage.getGradesByStudent(req.params.studentId);\n      res.json(grades);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch grades\" });\n    }\n  });\n\n  app.post(\"/api/grades\", requireAuth, requireRole(['teacher', 'admin']), async (req, res) => {\n    try {\n      const gradeData = insertGradeSchema.parse(req.body);\n      const grade = await storage.createGrade({\n        ...gradeData,\n        submittedBy: req.session.userId!\n      });\n      res.json(grade);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid grade data\" });\n    }\n  });\n\n  // Attendance routes\n  app.get(\"/api/attendance/student/:studentId\", requireAuth, async (req, res) => {\n    try {\n      const attendance = await storage.getAttendanceByStudent(req.params.studentId);\n      res.json(attendance);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch attendance\" });\n    }\n  });\n\n  app.post(\"/api/attendance\", requireAuth, requireRole(['teacher', 'admin']), async (req, res) => {\n    try {\n      const attendanceData = insertAttendanceSchema.parse(req.body);\n      const attendance = await storage.createAttendance({\n        ...attendanceData,\n        recordedBy: req.session.userId!\n      });\n      res.json(attendance);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid attendance data\" });\n    }\n  });\n\n  // Teacher reviews routes\n  app.get(\"/api/teachers/:teacherId/reviews\", requireAuth, async (req, res) => {\n    try {\n      const reviews = await storage.getTeacherReviews(req.params.teacherId);\n      res.json(reviews);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.post(\"/api/teacher-reviews\", requireAuth, requireRole(['student']), async (req, res) => {\n    try {\n      const reviewData = insertTeacherReviewSchema.parse(req.body);\n      \n      // Get student ID from user\n      const student = await storage.getStudentByUserId(req.session.userId!);\n      if (!student) {\n        return res.status(404).json({ error: \"Student profile not found\" });\n      }\n\n      const review = await storage.createTeacherReview({\n        ...reviewData,\n        studentId: student.id\n      });\n      res.json(review);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid review data\" });\n    }\n  });\n\n  // Dashboard stats routes\n  app.get(\"/api/dashboard/stats\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      let stats;\n      switch (user.role) {\n        case 'admin':\n          stats = await storage.getSchoolStats(user.schoolId!);\n          break;\n        case 'teacher':\n          const teacher = await storage.getTeacherByUserId(user.id);\n          stats = teacher ? await storage.getTeacherStats(teacher.id) : {};\n          break;\n        case 'student':\n          const student = await storage.getStudentByUserId(user.id);\n          stats = student ? await storage.getStudentStats(student.id) : {};\n          break;\n        default:\n          stats = {};\n      }\n\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Fee management routes\n  app.get(\"/api/invoices/student/:studentId\", requireAuth, async (req, res) => {\n    try {\n      const invoices = await storage.getInvoicesByStudent(req.params.studentId);\n      res.json(invoices);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch invoices\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":8834},"server/storage.ts":{"content":"import { db } from \"./db\";\nimport { eq, and, desc, asc } from \"drizzle-orm\";\nimport { \n  users, students, teachers, classes, subjects, grades, attendance, \n  teacherReviews, invoices, payments, notifications, feeStructures,\n  type User, type InsertUser, type Student, type InsertStudent,\n  type Teacher, type InsertTeacher, type Class, type InsertClass,\n  type Grade, type InsertGrade, type Attendance, type InsertAttendance,\n  type TeacherReview, type InsertTeacherReview, type Invoice, type Payment\n} from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  verifyPassword(email: string, password: string): Promise<User | null>;\n  \n  // Student management\n  getStudent(id: string): Promise<Student | undefined>;\n  getStudentByUserId(userId: string): Promise<Student | undefined>;\n  getStudentsByClass(classId: string): Promise<Student[]>;\n  createStudent(student: InsertStudent): Promise<Student>;\n  \n  // Teacher management\n  getTeacher(id: string): Promise<Teacher | undefined>;\n  getTeacherByUserId(userId: string): Promise<Teacher | undefined>;\n  getTeachers(): Promise<Teacher[]>;\n  createTeacher(teacher: InsertTeacher): Promise<Teacher>;\n  \n  // Class management\n  getClass(id: string): Promise<Class | undefined>;\n  getClasses(schoolId: string): Promise<Class[]>;\n  createClass(classData: InsertClass): Promise<Class>;\n  \n  // Grade management\n  getGradesByStudent(studentId: string): Promise<Grade[]>;\n  getGradesByClass(classId: string): Promise<Grade[]>;\n  createGrade(grade: InsertGrade): Promise<Grade>;\n  updateGrade(id: string, updates: Partial<Grade>): Promise<Grade>;\n  \n  // Attendance management\n  getAttendanceByStudent(studentId: string, startDate?: Date, endDate?: Date): Promise<Attendance[]>;\n  createAttendance(attendance: InsertAttendance): Promise<Attendance>;\n  \n  // Teacher reviews\n  getTeacherReviews(teacherId: string): Promise<TeacherReview[]>;\n  createTeacherReview(review: InsertTeacherReview): Promise<TeacherReview>;\n  \n  // Fee management\n  getInvoicesByStudent(studentId: string): Promise<Invoice[]>;\n  createInvoice(invoice: any): Promise<Invoice>;\n  \n  // Dashboard stats\n  getSchoolStats(schoolId: string): Promise<any>;\n  getTeacherStats(teacherId: string): Promise<any>;\n  getStudentStats(studentId: string): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const [user] = await db\n      .insert(users)\n      .values({ ...insertUser, password: hashedPassword })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async verifyPassword(email: string, password: string): Promise<User | null> {\n    const user = await this.getUserByEmail(email);\n    if (!user) return null;\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n\n  async getStudent(id: string): Promise<Student | undefined> {\n    const [student] = await db.select().from(students).where(eq(students.id, id));\n    return student || undefined;\n  }\n\n  async getStudentByUserId(userId: string): Promise<Student | undefined> {\n    const [student] = await db.select().from(students).where(eq(students.userId, userId));\n    return student || undefined;\n  }\n\n  async getStudentsByClass(classId: string): Promise<Student[]> {\n    return await db.select().from(students).where(eq(students.classId, classId));\n  }\n\n  async createStudent(student: InsertStudent): Promise<Student> {\n    const [newStudent] = await db.insert(students).values(student).returning();\n    return newStudent;\n  }\n\n  async getTeacher(id: string): Promise<Teacher | undefined> {\n    const [teacher] = await db.select().from(teachers).where(eq(teachers.id, id));\n    return teacher || undefined;\n  }\n\n  async getTeacherByUserId(userId: string): Promise<Teacher | undefined> {\n    const [teacher] = await db.select().from(teachers).where(eq(teachers.userId, userId));\n    return teacher || undefined;\n  }\n\n  async getTeachers(): Promise<Teacher[]> {\n    return await db.select().from(teachers);\n  }\n\n  async createTeacher(teacher: InsertTeacher): Promise<Teacher> {\n    const [newTeacher] = await db.insert(teachers).values(teacher).returning();\n    return newTeacher;\n  }\n\n  async getClass(id: string): Promise<Class | undefined> {\n    const [classData] = await db.select().from(classes).where(eq(classes.id, id));\n    return classData || undefined;\n  }\n\n  async getClasses(schoolId: string): Promise<Class[]> {\n    return await db.select().from(classes).where(eq(classes.schoolId, schoolId));\n  }\n\n  async createClass(classData: InsertClass): Promise<Class> {\n    const [newClass] = await db.insert(classes).values(classData).returning();\n    return newClass;\n  }\n\n  async getGradesByStudent(studentId: string): Promise<Grade[]> {\n    return await db.select().from(grades)\n      .where(eq(grades.studentId, studentId))\n      .orderBy(desc(grades.createdAt));\n  }\n\n  async getGradesByClass(classId: string): Promise<Grade[]> {\n    const result = await db.select({\n      id: grades.id,\n      studentId: grades.studentId,\n      examId: grades.examId,\n      marksObtained: grades.marksObtained,\n      gradeLetter: grades.gradeLetter,\n      remarks: grades.remarks,\n      submittedBy: grades.submittedBy,\n      createdAt: grades.createdAt\n    }).from(grades)\n      .innerJoin(students, eq(grades.studentId, students.id))\n      .where(eq(students.classId, classId))\n      .orderBy(desc(grades.createdAt));\n    \n    return result;\n  }\n\n  async createGrade(grade: InsertGrade): Promise<Grade> {\n    const [newGrade] = await db.insert(grades).values(grade).returning();\n    return newGrade;\n  }\n\n  async updateGrade(id: string, updates: Partial<Grade>): Promise<Grade> {\n    const [grade] = await db\n      .update(grades)\n      .set(updates)\n      .where(eq(grades.id, id))\n      .returning();\n    return grade;\n  }\n\n  async getAttendanceByStudent(studentId: string, startDate?: Date, endDate?: Date): Promise<Attendance[]> {\n    const query = db.select().from(attendance).where(eq(attendance.studentId, studentId));\n    \n    // For now, just return the basic query - date filtering can be added later\n    return await query.orderBy(desc(attendance.date));\n  }\n\n  async createAttendance(attendanceData: InsertAttendance): Promise<Attendance> {\n    const [newAttendance] = await db.insert(attendance).values(attendanceData).returning();\n    return newAttendance;\n  }\n\n  async getTeacherReviews(teacherId: string): Promise<TeacherReview[]> {\n    return await db.select().from(teacherReviews)\n      .where(eq(teacherReviews.teacherId, teacherId))\n      .orderBy(desc(teacherReviews.createdAt));\n  }\n\n  async createTeacherReview(review: InsertTeacherReview): Promise<TeacherReview> {\n    const [newReview] = await db.insert(teacherReviews).values(review).returning();\n    return newReview;\n  }\n\n  async getInvoicesByStudent(studentId: string): Promise<Invoice[]> {\n    return await db.select().from(invoices)\n      .where(eq(invoices.studentId, studentId))\n      .orderBy(desc(invoices.createdAt));\n  }\n\n  async createInvoice(invoice: any): Promise<Invoice> {\n    const [newInvoice] = await db.insert(invoices).values(invoice).returning();\n    return newInvoice;\n  }\n\n  async getSchoolStats(schoolId: string): Promise<any> {\n    // Get total students count\n    const studentCount = await db.select().from(students)\n      .innerJoin(users, eq(students.userId, users.id))\n      .where(eq(users.schoolId, schoolId));\n\n    const teacherCount = await db.select().from(teachers)\n      .innerJoin(users, eq(teachers.userId, users.id))\n      .where(eq(users.schoolId, schoolId));\n\n    const classCount = await db.select().from(classes)\n      .where(eq(classes.schoolId, schoolId));\n\n    return {\n      totalStudents: studentCount.length,\n      totalTeachers: teacherCount.length,\n      totalClasses: classCount.length,\n      feeCollectionRate: 94.2 // This would be calculated from actual payment data\n    };\n  }\n\n  async getTeacherStats(teacherId: string): Promise<any> {\n    const reviews = await this.getTeacherReviews(teacherId);\n    const avgRating = reviews.length > 0 \n      ? reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length \n      : 0;\n\n    return {\n      totalStudents: 156, // This would be calculated from actual assignments\n      totalClasses: 6,\n      averageRating: avgRating.toFixed(1),\n      attendanceRate: 92\n    };\n  }\n\n  async getStudentStats(studentId: string): Promise<any> {\n    const grades = await this.getGradesByStudent(studentId);\n    const attendanceRecords = await this.getAttendanceByStudent(studentId);\n    \n    const avgGrade = grades.length > 0\n      ? grades.reduce((sum, grade) => sum + grade.marksObtained, 0) / grades.length\n      : 0;\n\n    const attendanceRate = attendanceRecords.length > 0\n      ? (attendanceRecords.filter(a => a.status === 'present').length / attendanceRecords.length) * 100\n      : 0;\n\n    return {\n      overallAverage: avgGrade.toFixed(1),\n      attendanceRate: attendanceRate.toFixed(0),\n      classRank: 7, // This would be calculated from actual data\n      feeStatus: 'paid'\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":10039},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, decimal, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const roleEnum = pgEnum('role', ['super_admin', 'admin', 'teacher', 'student', 'parent']);\nexport const statusEnum = pgEnum('status', ['active', 'inactive', 'suspended']);\nexport const attendanceStatusEnum = pgEnum('attendance_status', ['present', 'absent', 'late']);\nexport const paymentStatusEnum = pgEnum('payment_status', ['pending', 'paid', 'overdue', 'cancelled']);\nexport const gradeLetterEnum = pgEnum('grade_letter', ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D', 'F']);\n\n// Core tables\nexport const schools = pgTable(\"schools\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\"),\n  phone: text(\"phone\"),\n  email: text(\"email\"),\n  timezone: text(\"timezone\").default(\"UTC\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\"),\n  role: roleEnum(\"role\").notNull(),\n  status: statusEnum(\"status\").default(\"active\"),\n  schoolId: varchar(\"school_id\").references(() => schools.id),\n  avatar: text(\"avatar\"),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow()\n});\n\nexport const classes = pgTable(\"classes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(), // e.g., \"Grade 10\"\n  section: text(\"section\").notNull(), // e.g., \"A\", \"B\"\n  year: integer(\"year\").notNull(),\n  schoolId: varchar(\"school_id\").notNull().references(() => schools.id),\n  capacity: integer(\"capacity\").default(30),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const subjects = pgTable(\"subjects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  code: text(\"code\").notNull(),\n  schoolId: varchar(\"school_id\").notNull().references(() => schools.id),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const students = pgTable(\"students\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  admissionNo: text(\"admission_no\").notNull(),\n  classId: varchar(\"class_id\").notNull().references(() => classes.id),\n  rollNo: integer(\"roll_no\"),\n  dateOfBirth: timestamp(\"date_of_birth\"),\n  parentContact: text(\"parent_contact\"),\n  address: text(\"address\"),\n  admissionDate: timestamp(\"admission_date\").defaultNow()\n});\n\nexport const teachers = pgTable(\"teachers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  employeeNo: text(\"employee_no\").notNull(),\n  qualification: text(\"qualification\"),\n  experience: integer(\"experience\"),\n  salary: decimal(\"salary\", { precision: 10, scale: 2 }),\n  hireDate: timestamp(\"hire_date\").defaultNow()\n});\n\nexport const teacherSubjects = pgTable(\"teacher_subjects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: varchar(\"teacher_id\").notNull().references(() => teachers.id),\n  subjectId: varchar(\"subject_id\").notNull().references(() => subjects.id),\n  classId: varchar(\"class_id\").notNull().references(() => classes.id)\n});\n\nexport const attendance = pgTable(\"attendance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => students.id),\n  date: timestamp(\"date\").notNull(),\n  status: attendanceStatusEnum(\"status\").notNull(),\n  remarks: text(\"remarks\"),\n  recordedBy: varchar(\"recorded_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const exams = pgTable(\"exams\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  maxMarks: integer(\"max_marks\").notNull(),\n  classId: varchar(\"class_id\").notNull().references(() => classes.id),\n  subjectId: varchar(\"subject_id\").notNull().references(() => subjects.id),\n  schoolId: varchar(\"school_id\").notNull().references(() => schools.id),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const grades = pgTable(\"grades\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => students.id),\n  examId: varchar(\"exam_id\").notNull().references(() => exams.id),\n  marksObtained: integer(\"marks_obtained\").notNull(),\n  gradeLetter: gradeLetterEnum(\"grade_letter\"),\n  remarks: text(\"remarks\"),\n  submittedBy: varchar(\"submitted_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const feeStructures = pgTable(\"fee_structures\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(), // e.g., \"Tuition Fee\", \"Lab Fee\"\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  frequency: text(\"frequency\").notNull(), // monthly, quarterly, yearly\n  classId: varchar(\"class_id\").references(() => classes.id),\n  schoolId: varchar(\"school_id\").notNull().references(() => schools.id),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const invoices = pgTable(\"invoices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => students.id),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  paidAmount: decimal(\"paid_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  dueDate: timestamp(\"due_date\").notNull(),\n  status: paymentStatusEnum(\"status\").default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const invoiceItems = pgTable(\"invoice_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceId: varchar(\"invoice_id\").notNull().references(() => invoices.id),\n  feeStructureId: varchar(\"fee_structure_id\").notNull().references(() => feeStructures.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  description: text(\"description\")\n});\n\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceId: varchar(\"invoice_id\").notNull().references(() => invoices.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentMethod: text(\"payment_method\").notNull(),\n  transactionId: text(\"transaction_id\"),\n  status: paymentStatusEnum(\"status\").default(\"pending\"),\n  paymentDate: timestamp(\"payment_date\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  recipientId: varchar(\"recipient_id\").notNull().references(() => users.id),\n  type: text(\"type\").notNull(), // email, sms, push\n  isRead: boolean(\"is_read\").default(false),\n  sentAt: timestamp(\"sent_at\").defaultNow()\n});\n\nexport const teacherReviews = pgTable(\"teacher_reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: varchar(\"teacher_id\").notNull().references(() => teachers.id),\n  studentId: varchar(\"student_id\").notNull().references(() => students.id),\n  rating: integer(\"rating\").notNull(), // 1-5\n  comment: text(\"comment\"),\n  isAnonymous: boolean(\"is_anonymous\").default(true),\n  isModerated: boolean(\"is_moderated\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow()\n});\n\n// Relations\nexport const schoolsRelations = relations(schools, ({ many }) => ({\n  users: many(users),\n  classes: many(classes),\n  subjects: many(subjects)\n}));\n\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  school: one(schools, {\n    fields: [users.schoolId],\n    references: [schools.id]\n  }),\n  student: one(students),\n  teacher: one(teachers),\n  notifications: many(notifications)\n}));\n\nexport const studentsRelations = relations(students, ({ one, many }) => ({\n  user: one(users, {\n    fields: [students.userId],\n    references: [users.id]\n  }),\n  class: one(classes, {\n    fields: [students.classId],\n    references: [classes.id]\n  }),\n  attendance: many(attendance),\n  grades: many(grades),\n  invoices: many(invoices),\n  teacherReviews: many(teacherReviews)\n}));\n\nexport const teachersRelations = relations(teachers, ({ one, many }) => ({\n  user: one(users, {\n    fields: [teachers.userId],\n    references: [users.id]\n  }),\n  teacherSubjects: many(teacherSubjects),\n  teacherReviews: many(teacherReviews)\n}));\n\nexport const classesRelations = relations(classes, ({ one, many }) => ({\n  school: one(schools, {\n    fields: [classes.schoolId],\n    references: [schools.id]\n  }),\n  students: many(students),\n  exams: many(exams)\n}));\n\nexport const gradesRelations = relations(grades, ({ one }) => ({\n  student: one(students, {\n    fields: [grades.studentId],\n    references: [students.id]\n  }),\n  exam: one(exams, {\n    fields: [grades.examId],\n    references: [exams.id]\n  })\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastLogin: true\n});\n\nexport const insertSchoolSchema = createInsertSchema(schools).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertStudentSchema = createInsertSchema(students).omit({\n  id: true,\n  admissionDate: true\n});\n\nexport const insertTeacherSchema = createInsertSchema(teachers).omit({\n  id: true,\n  hireDate: true\n});\n\nexport const insertClassSchema = createInsertSchema(classes).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertGradeSchema = createInsertSchema(grades).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertAttendanceSchema = createInsertSchema(attendance).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertTeacherReviewSchema = createInsertSchema(teacherReviews).omit({\n  id: true,\n  createdAt: true,\n  isModerated: true\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type School = typeof schools.$inferSelect;\nexport type InsertSchool = z.infer<typeof insertSchoolSchema>;\nexport type Student = typeof students.$inferSelect;\nexport type InsertStudent = z.infer<typeof insertStudentSchema>;\nexport type Teacher = typeof teachers.$inferSelect;\nexport type InsertTeacher = z.infer<typeof insertTeacherSchema>;\nexport type Class = typeof classes.$inferSelect;\nexport type InsertClass = z.infer<typeof insertClassSchema>;\nexport type Grade = typeof grades.$inferSelect;\nexport type InsertGrade = z.infer<typeof insertGradeSchema>;\nexport type Attendance = typeof attendance.$inferSelect;\nexport type InsertAttendance = z.infer<typeof insertAttendanceSchema>;\nexport type TeacherReview = typeof teacherReviews.$inferSelect;\nexport type InsertTeacherReview = z.infer<typeof insertTeacherReviewSchema>;\nexport type Invoice = typeof invoices.$inferSelect;\nexport type Payment = typeof payments.$inferSelect;\nexport type Notification = typeof notifications.$inferSelect;\n","size_bytes":11710},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/useAuth\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":896},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AttendanceTracker.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { apiRequest } from '@/lib/api';\nimport { format } from 'date-fns';\nimport { CalendarIcon, UserCheck, UserX, Clock, Save, Download } from 'lucide-react';\nimport type { Attendance, Student } from '@/types';\n\ninterface AttendanceRecord extends Attendance {\n  student?: {\n    user: {\n      name: string;\n    };\n    rollNo: number;\n    admissionNo: string;\n  };\n}\n\nexport default function AttendanceTracker() {\n  const { user } = useAuth();\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [selectedClass, setSelectedClass] = useState<string>('');\n  const [attendanceRecords, setAttendanceRecords] = useState<Record<string, string>>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch students for the selected class\n  const { data: students, isLoading: studentsLoading } = useQuery<Student[]>({\n    queryKey: ['/api/students', selectedClass],\n    enabled: !!selectedClass,\n  });\n\n  // Fetch existing attendance for the selected date and class\n  const { data: existingAttendance, isLoading: attendanceLoading } = useQuery<AttendanceRecord[]>({\n    queryKey: ['/api/attendance', selectedClass, format(selectedDate, 'yyyy-MM-dd')],\n    enabled: !!selectedClass && !!selectedDate,\n  });\n\n  // Submit attendance mutation\n  const submitAttendanceMutation = useMutation({\n    mutationFn: async (attendanceData: any[]) => {\n      const response = await apiRequest('POST', '/api/attendance', { records: attendanceData });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Attendance submitted successfully'\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/attendance'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const handleAttendanceChange = (studentId: string, status: string) => {\n    setAttendanceRecords(prev => ({\n      ...prev,\n      [studentId]: status\n    }));\n  };\n\n  const handleSubmitAttendance = () => {\n    if (!selectedClass || !selectedDate || Object.keys(attendanceRecords).length === 0) {\n      toast({\n        title: 'Error',\n        description: 'Please select a class, date, and mark attendance for students',\n        variant: 'destructive'\n      });\n      return;\n    }\n\n    const attendanceData = Object.entries(attendanceRecords).map(([studentId, status]) => ({\n      studentId,\n      date: selectedDate,\n      status,\n      remarks: ''\n    }));\n\n    submitAttendanceMutation.mutate(attendanceData);\n  };\n\n  const getAttendanceStats = () => {\n    const total = students?.length || 0;\n    const present = Object.values(attendanceRecords).filter(status => status === 'present').length;\n    const absent = Object.values(attendanceRecords).filter(status => status === 'absent').length;\n    const late = Object.values(attendanceRecords).filter(status => status === 'late').length;\n\n    return { total, present, absent, late };\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'present': return 'default';\n      case 'absent': return 'destructive';\n      case 'late': return 'secondary';\n      default: return 'outline';\n    }\n  };\n\n  const stats = getAttendanceStats();\n  const attendancePercentage = stats.total > 0 ? ((stats.present + stats.late) / stats.total * 100).toFixed(1) : '0';\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Attendance Controls */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <UserCheck className=\"h-5 w-5 text-blue-600\" />\n            <span>Attendance Tracker</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n            <div className=\"space-y-2\">\n              <Label>Select Class</Label>\n              <Select value={selectedClass} onValueChange={setSelectedClass}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose a class\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"class-1\">Grade 10-A</SelectItem>\n                  <SelectItem value=\"class-2\">Grade 10-B</SelectItem>\n                  <SelectItem value=\"class-3\">Grade 9-A</SelectItem>\n                  <SelectItem value=\"class-4\">Grade 9-B</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label>Select Date</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button variant=\"outline\" className=\"w-full justify-start text-left font-normal\">\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {selectedDate ? format(selectedDate, 'PPP') : 'Pick a date'}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={selectedDate}\n                    onSelect={(date) => date && setSelectedDate(date)}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Actions</Label>\n              <div className=\"flex space-x-2\">\n                <Button\n                  onClick={handleSubmitAttendance}\n                  disabled={submitAttendanceMutation.isPending}\n                  className=\"flex items-center space-x-2\"\n                >\n                  <Save className=\"h-4 w-4\" />\n                  <span>Save</span>\n                </Button>\n                <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n                  <Download className=\"h-4 w-4\" />\n                  <span>Export</span>\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Attendance Stats */}\n          {selectedClass && students && (\n            <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 mb-6\">\n              <div className=\"bg-blue-50 p-4 rounded-lg text-center\">\n                <p className=\"text-2xl font-bold text-blue-600\">{stats.total}</p>\n                <p className=\"text-sm text-blue-600\">Total Students</p>\n              </div>\n              <div className=\"bg-green-50 p-4 rounded-lg text-center\">\n                <p className=\"text-2xl font-bold text-green-600\">{stats.present}</p>\n                <p className=\"text-sm text-green-600\">Present</p>\n              </div>\n              <div className=\"bg-red-50 p-4 rounded-lg text-center\">\n                <p className=\"text-2xl font-bold text-red-600\">{stats.absent}</p>\n                <p className=\"text-sm text-red-600\">Absent</p>\n              </div>\n              <div className=\"bg-yellow-50 p-4 rounded-lg text-center\">\n                <p className=\"text-2xl font-bold text-yellow-600\">{stats.late}</p>\n                <p className=\"text-sm text-yellow-600\">Late</p>\n              </div>\n              <div className=\"bg-purple-50 p-4 rounded-lg text-center\">\n                <p className=\"text-2xl font-bold text-purple-600\">{attendancePercentage}%</p>\n                <p className=\"text-sm text-purple-600\">Attendance Rate</p>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Student Attendance List */}\n      {selectedClass && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Student Attendance - {format(selectedDate, 'MMMM dd, yyyy')}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {studentsLoading ? (\n              <div className=\"flex items-center justify-center h-32\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n              </div>\n            ) : students && students.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Roll No.</TableHead>\n                      <TableHead>Student Name</TableHead>\n                      <TableHead>Admission No.</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Quick Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {students.map((student) => (\n                      <TableRow key={student.id}>\n                        <TableCell className=\"font-medium\">{student.rollNo}</TableCell>\n                        <TableCell>\n                          {student.userId ? `Student ${student.rollNo}` : 'Unknown Student'}\n                        </TableCell>\n                        <TableCell>{student.admissionNo}</TableCell>\n                        <TableCell>\n                          <Select\n                            value={attendanceRecords[student.id] || ''}\n                            onValueChange={(value) => handleAttendanceChange(student.id, value)}\n                          >\n                            <SelectTrigger className=\"w-32\">\n                              <SelectValue placeholder=\"Mark\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"present\">Present</SelectItem>\n                              <SelectItem value=\"absent\">Absent</SelectItem>\n                              <SelectItem value=\"late\">Late</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-1\">\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => handleAttendanceChange(student.id, 'present')}\n                              className=\"p-1\"\n                            >\n                              <UserCheck className=\"h-4 w-4 text-green-600\" />\n                            </Button>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => handleAttendanceChange(student.id, 'absent')}\n                              className=\"p-1\"\n                            >\n                              <UserX className=\"h-4 w-4 text-red-600\" />\n                            </Button>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => handleAttendanceChange(student.id, 'late')}\n                              className=\"p-1\"\n                            >\n                              <Clock className=\"h-4 w-4 text-yellow-600\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <UserCheck className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-lg font-medium\">No students found</p>\n                <p className=\"text-sm\">Please select a different class</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {!selectedClass && (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <UserCheck className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Select a Class to Begin</h3>\n            <p className=\"text-gray-500\">Choose a class from the dropdown above to start marking attendance</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":12975},"client/src/components/FeeManagement.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { apiRequest } from '@/lib/api';\nimport { format } from 'date-fns';\nimport { CreditCard, Plus, Download, Receipt, DollarSign, Clock, CheckCircle, AlertCircle } from 'lucide-react';\nimport type { Invoice } from '@/types';\n\ninterface FeeStructure {\n  id: string;\n  name: string;\n  amount: string;\n  frequency: string;\n  classId?: string;\n  isActive: boolean;\n}\n\ninterface PaymentRecord {\n  id: string;\n  invoiceId: string;\n  amount: string;\n  paymentMethod: string;\n  status: string;\n  paymentDate: Date;\n  transactionId?: string;\n}\n\nexport default function FeeManagement() {\n  const { user } = useAuth();\n  const [selectedStudent, setSelectedStudent] = useState<string>('');\n  const [isCreateFeeOpen, setIsCreateFeeOpen] = useState(false);\n  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);\n  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch fee structures\n  const { data: feeStructures, isLoading: feesLoading } = useQuery<FeeStructure[]>({\n    queryKey: ['/api/fee-structures'],\n  });\n\n  // Fetch invoices for selected student\n  const { data: invoices, isLoading: invoicesLoading } = useQuery<Invoice[]>({\n    queryKey: ['/api/invoices/student', selectedStudent],\n    enabled: !!selectedStudent,\n  });\n\n  // Create fee structure mutation\n  const createFeeMutation = useMutation({\n    mutationFn: async (feeData: any) => {\n      const response = await apiRequest('POST', '/api/fee-structures', feeData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Fee structure created successfully'\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/fee-structures'] });\n      setIsCreateFeeOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive'\n      });\n    }\n  });\n\n  // Process payment mutation\n  const paymentMutation = useMutation({\n    mutationFn: async (paymentData: any) => {\n      const response = await apiRequest('POST', '/api/payments', paymentData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Payment processed successfully'\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      setIsPaymentModalOpen(false);\n      setSelectedInvoice(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'paid': return 'default';\n      case 'pending': return 'secondary';\n      case 'overdue': return 'destructive';\n      case 'cancelled': return 'outline';\n      default: return 'outline';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'paid': return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'pending': return <Clock className=\"h-4 w-4 text-yellow-600\" />;\n      case 'overdue': return <AlertCircle className=\"h-4 w-4 text-red-600\" />;\n      default: return <Clock className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const handlePayment = (invoice: Invoice) => {\n    setSelectedInvoice(invoice);\n    setIsPaymentModalOpen(true);\n  };\n\n  const processPayment = (paymentMethod: string) => {\n    if (!selectedInvoice) return;\n\n    paymentMutation.mutate({\n      invoiceId: selectedInvoice.id,\n      amount: selectedInvoice.totalAmount,\n      paymentMethod,\n      transactionId: `TXN${Date.now()}`\n    });\n  };\n\n  // Calculate fee statistics\n  const feeStats = invoices ? {\n    totalInvoices: invoices.length,\n    totalAmount: invoices.reduce((sum, inv) => sum + parseFloat(inv.totalAmount), 0),\n    paidAmount: invoices.filter(inv => inv.status === 'paid').reduce((sum, inv) => sum + parseFloat(inv.totalAmount), 0),\n    pendingAmount: invoices.filter(inv => inv.status === 'pending').reduce((sum, inv) => sum + parseFloat(inv.totalAmount), 0),\n    overdueAmount: invoices.filter(inv => inv.status === 'overdue').reduce((sum, inv) => sum + parseFloat(inv.totalAmount), 0)\n  } : { totalInvoices: 0, totalAmount: 0, paidAmount: 0, pendingAmount: 0, overdueAmount: 0 };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Fee Management Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <CardTitle className=\"flex items-center space-x-2\">\n              <CreditCard className=\"h-5 w-5 text-blue-600\" />\n              <span>Fee Management</span>\n            </CardTitle>\n            <div className=\"flex space-x-2\">\n              {user?.role === 'admin' && (\n                <Dialog open={isCreateFeeOpen} onOpenChange={setIsCreateFeeOpen}>\n                  <DialogTrigger asChild>\n                    <Button className=\"flex items-center space-x-2\">\n                      <Plus className=\"h-4 w-4\" />\n                      <span>Create Fee Structure</span>\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Create New Fee Structure</DialogTitle>\n                    </DialogHeader>\n                    <CreateFeeForm \n                      onSubmit={(data) => createFeeMutation.mutate(data)}\n                      isLoading={createFeeMutation.isPending}\n                    />\n                  </DialogContent>\n                </Dialog>\n              )}\n              <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n                <Download className=\"h-4 w-4\" />\n                <span>Export Report</span>\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label>Select Student</Label>\n              <Select value={selectedStudent} onValueChange={setSelectedStudent}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose a student\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"student-1\">John Doe - 2023001</SelectItem>\n                  <SelectItem value=\"student-2\">Jane Smith - 2023002</SelectItem>\n                  <SelectItem value=\"student-3\">Mike Johnson - 2023003</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Fee Statistics */}\n      {selectedStudent && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{feeStats.totalInvoices}</div>\n              <div className=\"text-sm text-gray-600\">Total Invoices</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-gray-800\">${feeStats.totalAmount.toFixed(2)}</div>\n              <div className=\"text-sm text-gray-600\">Total Amount</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">${feeStats.paidAmount.toFixed(2)}</div>\n              <div className=\"text-sm text-gray-600\">Paid Amount</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-yellow-600\">${feeStats.pendingAmount.toFixed(2)}</div>\n              <div className=\"text-sm text-gray-600\">Pending Amount</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-red-600\">${feeStats.overdueAmount.toFixed(2)}</div>\n              <div className=\"text-sm text-gray-600\">Overdue Amount</div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Student Invoices */}\n      {selectedStudent && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Fee Invoices</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {invoicesLoading ? (\n              <div className=\"flex items-center justify-center h-32\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n              </div>\n            ) : invoices && invoices.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Invoice ID</TableHead>\n                      <TableHead>Total Amount</TableHead>\n                      <TableHead>Paid Amount</TableHead>\n                      <TableHead>Due Date</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {invoices.map((invoice) => (\n                      <TableRow key={invoice.id}>\n                        <TableCell className=\"font-medium\">#{invoice.id.slice(-8)}</TableCell>\n                        <TableCell>${invoice.totalAmount}</TableCell>\n                        <TableCell>${invoice.paidAmount}</TableCell>\n                        <TableCell>{format(new Date(invoice.dueDate), 'MMM dd, yyyy')}</TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            {getStatusIcon(invoice.status)}\n                            <Badge variant={getStatusBadgeVariant(invoice.status)}>\n                              {invoice.status.charAt(0).toUpperCase() + invoice.status.slice(1)}\n                            </Badge>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            {invoice.status === 'pending' || invoice.status === 'overdue' ? (\n                              <Button \n                                size=\"sm\" \n                                onClick={() => handlePayment(invoice)}\n                                className=\"flex items-center space-x-1\"\n                              >\n                                <DollarSign className=\"h-3 w-3\" />\n                                <span>Pay Now</span>\n                              </Button>\n                            ) : (\n                              <Button size=\"sm\" variant=\"outline\" className=\"flex items-center space-x-1\">\n                                <Receipt className=\"h-3 w-3\" />\n                                <span>Receipt</span>\n                              </Button>\n                            )}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <CreditCard className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-lg font-medium\">No invoices found</p>\n                <p className=\"text-sm\">This student has no fee invoices</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Fee Structures (Admin Only) */}\n      {user?.role === 'admin' && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Fee Structures</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {feesLoading ? (\n              <div className=\"flex items-center justify-center h-32\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n              </div>\n            ) : feeStructures && feeStructures.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Fee Name</TableHead>\n                      <TableHead>Amount</TableHead>\n                      <TableHead>Frequency</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {feeStructures.map((fee) => (\n                      <TableRow key={fee.id}>\n                        <TableCell className=\"font-medium\">{fee.name}</TableCell>\n                        <TableCell>${fee.amount}</TableCell>\n                        <TableCell className=\"capitalize\">{fee.frequency}</TableCell>\n                        <TableCell>\n                          <Badge variant={fee.isActive ? 'default' : 'secondary'}>\n                            {fee.isActive ? 'Active' : 'Inactive'}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Button size=\"sm\" variant=\"outline\">Edit</Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <CreditCard className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-lg font-medium\">No fee structures found</p>\n                <p className=\"text-sm\">Create your first fee structure to get started</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Payment Modal */}\n      <Dialog open={isPaymentModalOpen} onOpenChange={setIsPaymentModalOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Process Payment</DialogTitle>\n          </DialogHeader>\n          {selectedInvoice && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <p className=\"text-sm text-gray-600\">Invoice Amount</p>\n                <p className=\"text-2xl font-bold\">${selectedInvoice.totalAmount}</p>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <Button \n                  onClick={() => processPayment('credit_card')}\n                  disabled={paymentMutation.isPending}\n                  className=\"flex items-center justify-center space-x-2\"\n                >\n                  <CreditCard className=\"h-4 w-4\" />\n                  <span>Credit Card</span>\n                </Button>\n                <Button \n                  onClick={() => processPayment('bank_transfer')}\n                  disabled={paymentMutation.isPending}\n                  variant=\"outline\"\n                  className=\"flex items-center justify-center space-x-2\"\n                >\n                  <DollarSign className=\"h-4 w-4\" />\n                  <span>Bank Transfer</span>\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {!selectedStudent && (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <CreditCard className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Select a Student</h3>\n            <p className=\"text-gray-500\">Choose a student from the dropdown above to view their fee information</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\n// Create Fee Form Component\nfunction CreateFeeForm({ onSubmit, isLoading }: { onSubmit: (data: any) => void; isLoading: boolean }) {\n  const [name, setName] = useState('');\n  const [amount, setAmount] = useState('');\n  const [frequency, setFrequency] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit({\n      name,\n      amount: parseFloat(amount),\n      frequency,\n      isActive: true\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"feeName\">Fee Name</Label>\n        <Input\n          id=\"feeName\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          placeholder=\"e.g., Tuition Fee\"\n          required\n        />\n      </div>\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"amount\">Amount ($)</Label>\n        <Input\n          id=\"amount\"\n          type=\"number\"\n          step=\"0.01\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n          placeholder=\"0.00\"\n          required\n        />\n      </div>\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"frequency\">Frequency</Label>\n        <Select value={frequency} onValueChange={setFrequency}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select frequency\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"monthly\">Monthly</SelectItem>\n            <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n            <SelectItem value=\"yearly\">Yearly</SelectItem>\n            <SelectItem value=\"one_time\">One Time</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      <Button type=\"submit\" disabled={isLoading} className=\"w-full\">\n        {isLoading ? 'Creating...' : 'Create Fee Structure'}\n      </Button>\n    </form>\n  );\n}\n","size_bytes":18609},"client/src/components/GradeEntry.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/api';\nimport { BookOpen, Save } from 'lucide-react';\n\ninterface GradeEntryProps {\n  studentId?: string;\n  examId?: string;\n}\n\nexport default function GradeEntry({ studentId, examId }: GradeEntryProps) {\n  const [marksObtained, setMarksObtained] = useState('');\n  const [gradeLetter, setGradeLetter] = useState('');\n  const [remarks, setRemarks] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const submitGradeMutation = useMutation({\n    mutationFn: async (gradeData: any) => {\n      const response = await apiRequest('POST', '/api/grades', gradeData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Grade submitted successfully'\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/grades'] });\n      // Reset form\n      setMarksObtained('');\n      setGradeLetter('');\n      setRemarks('');\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!studentId || !examId || !marksObtained) {\n      toast({\n        title: 'Error',\n        description: 'Please fill in all required fields',\n        variant: 'destructive'\n      });\n      return;\n    }\n\n    submitGradeMutation.mutate({\n      studentId,\n      examId,\n      marksObtained: parseInt(marksObtained),\n      gradeLetter: gradeLetter || undefined,\n      remarks: remarks || undefined\n    });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <BookOpen className=\"h-5 w-5 text-blue-600\" />\n          <span>Grade Entry</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"marks\">Marks Obtained</Label>\n              <Input\n                id=\"marks\"\n                type=\"number\"\n                placeholder=\"Enter marks\"\n                value={marksObtained}\n                onChange={(e) => setMarksObtained(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"grade\">Grade Letter</Label>\n              <Select value={gradeLetter} onValueChange={setGradeLetter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select grade\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"A+\">A+</SelectItem>\n                  <SelectItem value=\"A\">A</SelectItem>\n                  <SelectItem value=\"A-\">A-</SelectItem>\n                  <SelectItem value=\"B+\">B+</SelectItem>\n                  <SelectItem value=\"B\">B</SelectItem>\n                  <SelectItem value=\"B-\">B-</SelectItem>\n                  <SelectItem value=\"C+\">C+</SelectItem>\n                  <SelectItem value=\"C\">C</SelectItem>\n                  <SelectItem value=\"C-\">C-</SelectItem>\n                  <SelectItem value=\"D\">D</SelectItem>\n                  <SelectItem value=\"F\">F</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"remarks\">Remarks (Optional)</Label>\n            <Input\n              id=\"remarks\"\n              placeholder=\"Enter remarks\"\n              value={remarks}\n              onChange={(e) => setRemarks(e.target.value)}\n            />\n          </div>\n          <Button \n            type=\"submit\" \n            disabled={submitGradeMutation.isPending}\n            className=\"flex items-center space-x-2\"\n          >\n            <Save className=\"h-4 w-4\" />\n            <span>\n              {submitGradeMutation.isPending ? 'Submitting...' : 'Submit Grade'}\n            </span>\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4613},"client/src/components/Layout.tsx":{"content":"import { ReactNode } from 'react';\nimport Sidebar from './Sidebar';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Bell, Mail } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const { user } = useAuth();\n\n  const getDashboardTitle = () => {\n    switch (user?.role) {\n      case 'admin':\n      case 'super_admin':\n        return 'Administrator Dashboard';\n      case 'teacher':\n        return 'Teacher Dashboard';\n      case 'student':\n        return 'Student Dashboard';\n      case 'parent':\n        return 'Parent Dashboard';\n      default:\n        return 'Dashboard';\n    }\n  };\n\n  const getDashboardSubtitle = () => {\n    switch (user?.role) {\n      case 'admin':\n      case 'super_admin':\n        return \"Welcome back! Here's what's happening at your school today.\";\n      case 'teacher':\n        return 'Ready to inspire young minds? Check your classes and assignments.';\n      case 'student':\n        return 'Track your progress and stay on top of your studies.';\n      case 'parent':\n        return \"Stay connected with your child's educational journey.\";\n      default:\n        return 'Welcome to SchoolPro';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"flex\">\n        <Sidebar />\n        \n        <div className=\"flex-1 lg:ml-64\">\n          {/* Header */}\n          <div className=\"bg-gradient-to-r from-blue-600 via-purple-600 to-purple-700 text-white p-6 lg:p-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl lg:text-3xl font-bold mb-2\">{getDashboardTitle()}</h1>\n                <p className=\"text-blue-100 opacity-90\">{getDashboardSubtitle()}</p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"relative\">\n                  <Button variant=\"ghost\" size=\"icon\" className=\"text-white hover:bg-white/20\">\n                    <Bell className=\"h-5 w-5\" />\n                  </Button>\n                  <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                    3\n                  </span>\n                </div>\n                <div className=\"relative\">\n                  <Button variant=\"ghost\" size=\"icon\" className=\"text-white hover:bg-white/20\">\n                    <Mail className=\"h-5 w-5\" />\n                  </Button>\n                  <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                    7\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"p-6\">\n            {children}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2979},"client/src/components/Sidebar.tsx":{"content":"import { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { \n  LayoutDashboard, Users, Building, Calendar, TrendingUp, \n  CreditCard, Bell, Star, Settings, BookOpen, Trophy,\n  MessageCircle, User, CalendarDays, LogOut, GraduationCap\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nconst navigationConfig = {\n  admin: [\n    { icon: LayoutDashboard, text: 'Dashboard', active: true },\n    { icon: Users, text: 'User Management' },\n    { icon: Building, text: 'Classes & Sections' },\n    { icon: Calendar, text: 'Attendance' },\n    { icon: TrendingUp, text: 'Academic Reports' },\n    { icon: CreditCard, text: 'Fee Management' },\n    { icon: Bell, text: 'Notifications' },\n    { icon: Star, text: 'Teacher Reviews' },\n    { icon: Settings, text: 'Settings' }\n  ],\n  teacher: [\n    { icon: LayoutDashboard, text: 'Dashboard', active: true },\n    { icon: Users, text: 'My Classes' },\n    { icon: Calendar, text: 'Attendance' },\n    { icon: BookOpen, text: 'Gradebook' },\n    { icon: Trophy, text: 'Scoreboard' },\n    { icon: MessageCircle, text: 'Messages' },\n    { icon: Star, text: 'My Reviews' },\n    { icon: User, text: 'Profile' }\n  ],\n  student: [\n    { icon: LayoutDashboard, text: 'Dashboard', active: true },\n    { icon: CalendarDays, text: 'My Schedule' },\n    { icon: TrendingUp, text: 'My Grades' },\n    { icon: Calendar, text: 'Attendance' },\n    { icon: Trophy, text: 'Leaderboard' },\n    { icon: CreditCard, text: 'Fees & Payments' },\n    { icon: MessageCircle, text: 'Messages' },\n    { icon: User, text: 'Profile' }\n  ],\n  parent: [\n    { icon: LayoutDashboard, text: 'Dashboard', active: true },\n    { icon: User, text: \"Child's Profile\" },\n    { icon: TrendingUp, text: 'Academic Progress' },\n    { icon: Calendar, text: 'Attendance' },\n    { icon: CreditCard, text: 'Fee Payments' },\n    { icon: MessageCircle, text: 'Teacher Communication' },\n    { icon: Bell, text: 'Notifications' },\n    { icon: Settings, text: 'Settings' }\n  ]\n};\n\nexport default function Sidebar() {\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      toast({\n        title: \"Logged out successfully\",\n        description: \"See you next time!\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to log out\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const navItems = navigationConfig[user?.role as keyof typeof navigationConfig] || [];\n\n  const getUserInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  const getRoleDisplay = (role: string) => {\n    switch (role) {\n      case 'admin':\n      case 'super_admin':\n        return 'Administrator';\n      case 'teacher':\n        return 'Teacher';\n      case 'student':\n        return 'Student';\n      case 'parent':\n        return 'Parent';\n      default:\n        return role;\n    }\n  };\n\n  return (\n    <div className=\"fixed left-0 top-0 h-full w-64 bg-gradient-to-b from-blue-600 via-purple-600 to-purple-700 text-white shadow-2xl z-50 lg:block hidden\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-white/20\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"p-2 bg-white/20 rounded-lg\">\n            <GraduationCap className=\"h-6 w-6\" />\n          </div>\n          <div>\n            <h2 className=\"text-xl font-bold\">SchoolPro</h2>\n            <p className=\"text-sm text-white/70\">Greenwood High School</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navItems.map((item, index) => {\n          const Icon = item.icon;\n          return (\n            <Button\n              key={index}\n              variant=\"ghost\"\n              className={`w-full justify-start text-white hover:bg-white/20 transition-all duration-200 ${\n                item.active ? 'bg-white/20 transform translate-x-1' : ''\n              }`}\n            >\n              <Icon className=\"mr-3 h-4 w-4\" />\n              {item.text}\n            </Button>\n          );\n        })}\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-white/20\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <Avatar className=\"h-10 w-10\">\n            <AvatarImage src={user?.avatar} />\n            <AvatarFallback className=\"bg-white/20 text-white\">\n              {user?.name ? getUserInitials(user.name) : 'U'}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-white truncate\">\n              {user?.name || 'Unknown User'}\n            </p>\n            <p className=\"text-xs text-white/70\">\n              {user?.role ? getRoleDisplay(user.role) : 'User'}\n            </p>\n          </div>\n        </div>\n        <Button\n          onClick={handleLogout}\n          variant=\"ghost\"\n          className=\"w-full justify-start text-white hover:bg-red-500/20 transition-colors\"\n        >\n          <LogOut className=\"mr-3 h-4 w-4\" />\n          Logout\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5301},"client/src/components/TeacherReviews.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { apiRequest } from '@/lib/api';\nimport { format } from 'date-fns';\nimport { Star, MessageSquare, ThumbsUp, ThumbsDown, Send, Filter, TrendingUp, Users } from 'lucide-react';\nimport type { TeacherReview, Teacher } from '@/types';\n\ninterface ReviewWithTeacher extends TeacherReview {\n  teacher?: {\n    user: {\n      name: string;\n      avatar?: string;\n    };\n    employeeNo: string;\n  };\n}\n\ninterface TeacherStats {\n  id: string;\n  name: string;\n  averageRating: number;\n  totalReviews: number;\n  subjects: string[];\n  ratingDistribution: { [key: number]: number };\n}\n\nexport default function TeacherReviews() {\n  const { user } = useAuth();\n  const [selectedTeacher, setSelectedTeacher] = useState<string>('');\n  const [isSubmitReviewOpen, setIsSubmitReviewOpen] = useState(false);\n  const [filterRating, setFilterRating] = useState<string>('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch teachers\n  const { data: teachers, isLoading: teachersLoading } = useQuery<Teacher[]>({\n    queryKey: ['/api/teachers'],\n  });\n\n  // Fetch reviews for selected teacher\n  const { data: reviews, isLoading: reviewsLoading } = useQuery<ReviewWithTeacher[]>({\n    queryKey: ['/api/teachers', selectedTeacher, 'reviews'],\n    enabled: !!selectedTeacher,\n  });\n\n  // Submit review mutation\n  const submitReviewMutation = useMutation({\n    mutationFn: async (reviewData: any) => {\n      const response = await apiRequest('POST', '/api/teacher-reviews', reviewData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Review submitted successfully'\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/teachers'] });\n      setIsSubmitReviewOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive'\n      });\n    }\n  });\n\n  // Calculate teacher statistics\n  const getTeacherStats = (teacherId: string): TeacherStats | null => {\n    if (!reviews || !teachers) return null;\n\n    const teacher = teachers.find(t => t.id === teacherId);\n    if (!teacher) return null;\n\n    const teacherReviews = reviews.filter(r => r.teacherId === teacherId);\n    const totalReviews = teacherReviews.length;\n    const averageRating = totalReviews > 0 \n      ? teacherReviews.reduce((sum, review) => sum + review.rating, 0) / totalReviews \n      : 0;\n\n    const ratingDistribution = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };\n    teacherReviews.forEach(review => {\n      const rating = review.rating as keyof typeof ratingDistribution;\n      ratingDistribution[rating] = (ratingDistribution[rating] || 0) + 1;\n    });\n\n    return {\n      id: teacherId,\n      name: `Teacher ${teacher.employeeNo}`, // This would come from the user relation\n      averageRating,\n      totalReviews,\n      subjects: ['Mathematics', 'Physics'], // This would come from teacher subjects\n      ratingDistribution\n    };\n  };\n\n  const renderStars = (rating: number, size: 'sm' | 'md' | 'lg' = 'md') => {\n    const sizeClass = {\n      sm: 'h-3 w-3',\n      md: 'h-4 w-4',\n      lg: 'h-5 w-5'\n    }[size];\n\n    return (\n      <div className=\"flex\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <Star\n            key={star}\n            className={`${sizeClass} ${\n              star <= rating ? 'text-yellow-400 fill-current' : 'text-gray-300'\n            }`}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  const filteredReviews = reviews?.filter(review => \n    !filterRating || review.rating.toString() === filterRating\n  ) || [];\n\n  const teacherStats = selectedTeacher ? getTeacherStats(selectedTeacher) : null;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Star className=\"h-5 w-5 text-yellow-600\" />\n              <span>Teacher Reviews & Ratings</span>\n            </CardTitle>\n            {user?.role === 'student' && (\n              <Dialog open={isSubmitReviewOpen} onOpenChange={setIsSubmitReviewOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"flex items-center space-x-2\">\n                    <MessageSquare className=\"h-4 w-4\" />\n                    <span>Submit Review</span>\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Submit Teacher Review</DialogTitle>\n                  </DialogHeader>\n                  <SubmitReviewForm \n                    teachers={teachers || []}\n                    onSubmit={(data) => submitReviewMutation.mutate(data)}\n                    isLoading={submitReviewMutation.isPending}\n                  />\n                </DialogContent>\n              </Dialog>\n            )}\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label>Select Teacher</Label>\n              <Select value={selectedTeacher} onValueChange={setSelectedTeacher}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose a teacher\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {teachers?.map((teacher) => (\n                    <SelectItem key={teacher.id} value={teacher.id}>\n                      Teacher {teacher.employeeNo} - {teacher.qualification}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Filter by Rating</Label>\n              <Select value={filterRating} onValueChange={setFilterRating}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All ratings\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All Ratings</SelectItem>\n                  <SelectItem value=\"5\">5 Stars</SelectItem>\n                  <SelectItem value=\"4\">4 Stars</SelectItem>\n                  <SelectItem value=\"3\">3 Stars</SelectItem>\n                  <SelectItem value=\"2\">2 Stars</SelectItem>\n                  <SelectItem value=\"1\">1 Star</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Teacher Statistics */}\n      {teacherStats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-6 bg-gradient-to-r from-yellow-500 to-orange-500 text-white\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium opacity-90\">Average Rating</p>\n                  <p className=\"text-3xl font-bold mt-2\">{teacherStats.averageRating.toFixed(1)}</p>\n                </div>\n                <Star className=\"h-12 w-12 opacity-80\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium opacity-90\">Total Reviews</p>\n                  <p className=\"text-3xl font-bold mt-2\">{teacherStats.totalReviews}</p>\n                </div>\n                <MessageSquare className=\"h-12 w-12 opacity-80\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 bg-gradient-to-r from-green-500 to-emerald-600 text-white\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium opacity-90\">Subjects</p>\n                  <p className=\"text-3xl font-bold mt-2\">{teacherStats.subjects.length}</p>\n                </div>\n                <Users className=\"h-12 w-12 opacity-80\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 bg-gradient-to-r from-purple-600 to-pink-600 text-white\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium opacity-90\">Top Rating</p>\n                  <p className=\"text-3xl font-bold mt-2\">\n                    {Math.max(...Object.keys(teacherStats.ratingDistribution).map(Number))}\n                  </p>\n                </div>\n                <TrendingUp className=\"h-12 w-12 opacity-80\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Rating Distribution */}\n      {teacherStats && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Rating Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {[5, 4, 3, 2, 1].map((rating) => {\n                const count = teacherStats.ratingDistribution[rating] || 0;\n                const percentage = teacherStats.totalReviews > 0 \n                  ? (count / teacherStats.totalReviews) * 100 \n                  : 0;\n                \n                return (\n                  <div key={rating} className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-2 w-20\">\n                      <span className=\"text-sm font-medium\">{rating}</span>\n                      <Star className=\"h-4 w-4 text-yellow-400 fill-current\" />\n                    </div>\n                    <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\n                      <div \n                        className=\"bg-yellow-400 h-2 rounded-full transition-all duration-300\"\n                        style={{ width: `${percentage}%` }}\n                      />\n                    </div>\n                    <span className=\"text-sm text-gray-600 w-12\">{count}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Reviews List */}\n      {selectedTeacher && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Student Reviews</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {reviewsLoading ? (\n              <div className=\"flex items-center justify-center h-32\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n              </div>\n            ) : filteredReviews.length > 0 ? (\n              <div className=\"space-y-4\">\n                {filteredReviews.map((review) => (\n                  <div key={review.id} className=\"border rounded-lg p-4 space-y-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Avatar className=\"h-8 w-8\">\n                          <AvatarFallback>\n                            {review.isAnonymous ? 'A' : 'S'}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"text-sm font-medium\">\n                            {review.isAnonymous ? 'Anonymous Student' : 'Student'}\n                          </p>\n                          <p className=\"text-xs text-gray-500\">\n                            {format(new Date(review.createdAt), 'MMM dd, yyyy')}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        {renderStars(review.rating)}\n                        <Badge variant=\"secondary\">\n                          {review.rating}.0\n                        </Badge>\n                      </div>\n                    </div>\n                    {review.comment && (\n                      <p className=\"text-sm text-gray-700 pl-11\">\n                        \"{review.comment}\"\n                      </p>\n                    )}\n                    {!review.isModerated && user?.role === 'admin' && (\n                      <div className=\"flex items-center space-x-2 pl-11\">\n                        <Badge variant=\"outline\" className=\"text-yellow-600\">\n                          Pending Moderation\n                        </Badge>\n                        <Button size=\"sm\" variant=\"outline\">\n                          <ThumbsUp className=\"h-3 w-3 mr-1\" />\n                          Approve\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\">\n                          <ThumbsDown className=\"h-3 w-3 mr-1\" />\n                          Reject\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <MessageSquare className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-lg font-medium\">No reviews found</p>\n                <p className=\"text-sm\">\n                  {filterRating \n                    ? `No reviews found with ${filterRating} star${filterRating !== '1' ? 's' : ''}`\n                    : 'This teacher has no reviews yet'\n                  }\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {!selectedTeacher && (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <Star className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Select a Teacher</h3>\n            <p className=\"text-gray-500\">Choose a teacher from the dropdown above to view their reviews and ratings</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\n// Submit Review Form Component\nfunction SubmitReviewForm({ \n  teachers, \n  onSubmit, \n  isLoading \n}: { \n  teachers: Teacher[]; \n  onSubmit: (data: any) => void; \n  isLoading: boolean; \n}) {\n  const [teacherId, setTeacherId] = useState('');\n  const [rating, setRating] = useState('');\n  const [comment, setComment] = useState('');\n  const [isAnonymous, setIsAnonymous] = useState(true);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit({\n      teacherId,\n      rating: parseInt(rating),\n      comment: comment || undefined,\n      isAnonymous\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"teacher\">Select Teacher</Label>\n        <Select value={teacherId} onValueChange={setTeacherId}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Choose a teacher\" />\n          </SelectTrigger>\n          <SelectContent>\n            {teachers.map((teacher) => (\n              <SelectItem key={teacher.id} value={teacher.id}>\n                Teacher {teacher.employeeNo} - {teacher.qualification}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"rating\">Rating</Label>\n        <Select value={rating} onValueChange={setRating}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select rating\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"5\">⭐⭐⭐⭐⭐ Excellent</SelectItem>\n            <SelectItem value=\"4\">⭐⭐⭐⭐ Good</SelectItem>\n            <SelectItem value=\"3\">⭐⭐⭐ Average</SelectItem>\n            <SelectItem value=\"2\">⭐⭐ Below Average</SelectItem>\n            <SelectItem value=\"1\">⭐ Poor</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"comment\">Comments (Optional)</Label>\n        <Textarea\n          id=\"comment\"\n          value={comment}\n          onChange={(e) => setComment(e.target.value)}\n          placeholder=\"Share your thoughts about this teacher...\"\n          rows={3}\n        />\n      </div>\n      <Button type=\"submit\" disabled={isLoading || !teacherId || !rating} className=\"w-full\">\n        <Send className=\"h-4 w-4 mr-2\" />\n        {isLoading ? 'Submitting...' : 'Submit Review'}\n      </Button>\n    </form>\n  );\n}\n","size_bytes":17312},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/api';\nimport type { User, AuthResponse } from '@/types';\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (email: string, password: string, role?: string) => Promise<void>;\n  logout: () => Promise<void>;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const queryClient = useQueryClient();\n\n  // Check if user is authenticated\n  const { data: authData, isLoading } = useQuery<AuthResponse | null>({\n    queryKey: ['/api/auth/me'],\n    retry: false,\n    refetchOnMount: true,\n    refetchOnWindowFocus: false\n  });\n\n  useEffect(() => {\n    if (authData?.user) {\n      setUser(authData.user);\n    } else {\n      setUser(null);\n    }\n  }, [authData]);\n\n  const loginMutation = useMutation({\n    mutationFn: async ({ email, password, role }: { email: string; password: string; role?: string }) => {\n      const response = await apiRequest('POST', '/api/auth/login', { email, password, role });\n      return response.json() as Promise<AuthResponse>;\n    },\n    onSuccess: (data) => {\n      setUser(data.user);\n      queryClient.setQueryData(['/api/auth/me'], data);\n    }\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest('POST', '/api/auth/logout');\n    },\n    onSuccess: () => {\n      setUser(null);\n      queryClient.removeQueries();\n      queryClient.setQueryData(['/api/auth/me'], null);\n    }\n  });\n\n  const login = async (email: string, password: string, role?: string) => {\n    await loginMutation.mutateAsync({ email, password, role });\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      user,\n      isLoading,\n      login,\n      logout,\n      isAuthenticated: !!user\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":2373},"client/src/lib/api.ts":{"content":"import { queryClient } from './queryClient';\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n\n  return res;\n}\n\nexport async function fetchWithAuth(url: string) {\n  const response = await fetch(url, {\n    credentials: 'include'\n  });\n  \n  if (!response.ok) {\n    if (response.status === 401) {\n      // Clear auth data and redirect to login\n      queryClient.setQueryData(['/api/auth/me'], null);\n      window.location.href = '/login';\n      return null;\n    }\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  \n  return response.json();\n}\n","size_bytes":950},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useAuth } from '@/hooks/useAuth';\nimport { useLocation } from 'wouter';\nimport Layout from '@/components/Layout';\nimport AdminDashboard from '@/components/admin/AdminDashboard';\nimport TeacherDashboard from '@/components/teacher/TeacherDashboard';\nimport StudentDashboard from '@/components/student/StudentDashboard';\nimport ParentDashboard from '@/components/parent/ParentDashboard';\n\nexport default function Dashboard() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    setLocation('/login');\n    return null;\n  }\n\n  const renderDashboard = () => {\n    switch (user?.role) {\n      case 'admin':\n      case 'super_admin':\n        return <AdminDashboard />;\n      case 'teacher':\n        return <TeacherDashboard />;\n      case 'student':\n        return <StudentDashboard />;\n      case 'parent':\n        return <ParentDashboard />;\n      default:\n        return <div>Unknown role</div>;\n    }\n  };\n\n  return (\n    <Layout>\n      {renderDashboard()}\n    </Layout>\n  );\n}\n","size_bytes":1284},"client/src/pages/login.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { GraduationCap, Mail, Lock, UserCheck } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Login() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [role, setRole] = useState('admin');\n  const [isLoading, setIsLoading] = useState(false);\n  const { login, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    setLocation('/');\n    return null;\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email || !password) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      await login(email, password, role);\n      setLocation('/');\n      toast({\n        title: \"Success\",\n        description: \"Welcome to SchoolPro!\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Login Failed\",\n        description: \"Invalid email or password\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-600 via-purple-600 to-purple-800\">\n      <Card className=\"w-full max-w-md mx-4 shadow-2xl bg-white/95 backdrop-blur\">\n        <CardHeader className=\"text-center pb-6\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"p-3 bg-gradient-to-br from-blue-600 to-purple-600 rounded-full\">\n              <GraduationCap className=\"h-8 w-8 text-white\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">SchoolPro</CardTitle>\n          <p className=\"text-gray-600\">School Management System</p>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"pl-10\"\n                  required\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"pl-10\"\n                  required\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"role\">Login As</Label>\n              <Select value={role} onValueChange={setRole}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select your role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"admin\">School Administrator</SelectItem>\n                  <SelectItem value=\"teacher\">Teacher</SelectItem>\n                  <SelectItem value=\"student\">Student</SelectItem>\n                  <SelectItem value=\"parent\">Parent</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-medium py-2 px-4 rounded-lg transition-all duration-200\"\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                  <span>Signing In...</span>\n                </div>\n              ) : (\n                <div className=\"flex items-center space-x-2\">\n                  <UserCheck className=\"w-4 h-4\" />\n                  <span>Sign In</span>\n                </div>\n              )}\n            </Button>\n            \n            <div className=\"text-center\">\n              <a href=\"#\" className=\"text-sm text-blue-600 hover:text-blue-700 transition-colors\">\n                Forgot Password?\n              </a>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5430},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: 'super_admin' | 'admin' | 'teacher' | 'student' | 'parent';\n  phone?: string;\n  avatar?: string;\n}\n\nexport interface AuthResponse {\n  user: User;\n}\n\nexport interface DashboardStats {\n  totalStudents?: number;\n  totalTeachers?: number;\n  totalClasses?: number;\n  feeCollectionRate?: number;\n  overallAverage?: string;\n  attendanceRate?: string;\n  classRank?: number;\n  feeStatus?: string;\n  averageRating?: string;\n}\n\nexport interface Student {\n  id: string;\n  userId: string;\n  admissionNo: string;\n  classId: string;\n  rollNo?: number;\n  dateOfBirth?: Date;\n  parentContact?: string;\n  address?: string;\n}\n\nexport interface Teacher {\n  id: string;\n  userId: string;\n  employeeNo: string;\n  qualification?: string;\n  experience?: number;\n  salary?: string;\n}\n\nexport interface Grade {\n  id: string;\n  studentId: string;\n  examId: string;\n  marksObtained: number;\n  gradeLetter?: string;\n  remarks?: string;\n  submittedBy: string;\n  createdAt: Date;\n}\n\nexport interface Attendance {\n  id: string;\n  studentId: string;\n  date: Date;\n  status: 'present' | 'absent' | 'late';\n  remarks?: string;\n  recordedBy: string;\n}\n\nexport interface TeacherReview {\n  id: string;\n  teacherId: string;\n  studentId: string;\n  rating: number;\n  comment?: string;\n  isAnonymous: boolean;\n  createdAt: Date;\n}\n\nexport interface Class {\n  id: string;\n  name: string;\n  section: string;\n  year: number;\n  schoolId: string;\n  capacity?: number;\n}\n\nexport interface Invoice {\n  id: string;\n  studentId: string;\n  totalAmount: string;\n  paidAmount: string;\n  dueDate: Date;\n  status: 'pending' | 'paid' | 'overdue' | 'cancelled';\n  createdAt: Date;\n}\n","size_bytes":1704},"client/src/components/admin/AdminDashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Users, UserCheck, Building, DollarSign, Plus, FileText, CreditCard, AlertTriangle, Clock, UserX, Star } from 'lucide-react';\nimport type { DashboardStats } from '@/types';\n\nexport default function AdminDashboard() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard/stats']\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"h-32 bg-gray-200 animate-pulse rounded-lg\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const statCards = [\n    {\n      title: 'Total Students',\n      value: stats?.totalStudents || 1247,\n      icon: Users,\n      gradient: 'from-blue-600 to-purple-600'\n    },\n    {\n      title: 'Teaching Staff',\n      value: stats?.totalTeachers || 89,\n      icon: UserCheck,\n      gradient: 'from-green-500 to-emerald-600'\n    },\n    {\n      title: 'Classes',\n      value: stats?.totalClasses || 42,\n      icon: Building,\n      gradient: 'from-orange-500 to-red-500'\n    },\n    {\n      title: 'Fee Collection',\n      value: `${stats?.feeCollectionRate || 94.2}%`,\n      icon: DollarSign,\n      gradient: 'from-purple-600 to-pink-600'\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* KPI Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {statCards.map((stat, index) => {\n          const Icon = stat.icon;\n          return (\n            <Card key={index} className=\"overflow-hidden\">\n              <CardContent className={`p-6 bg-gradient-to-r ${stat.gradient} text-white`}>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium opacity-90\">{stat.title}</p>\n                    <p className=\"text-3xl font-bold mt-2\">{stat.value}</p>\n                  </div>\n                  <Icon className=\"h-12 w-12 opacity-80\" />\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* School Performance Overview */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <FileText className=\"h-5 w-5 text-blue-600\" />\n              <span>School Performance Overview</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64 flex items-center justify-center bg-gray-50 rounded-lg border-2 border-dashed border-gray-300\">\n              <div className=\"text-center text-gray-500\">\n                <FileText className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-lg font-medium\">Performance Analytics Chart</p>\n                <p className=\"text-sm\">Integration with Chart.js or similar</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Alerts */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <AlertTriangle className=\"h-5 w-5 text-orange-600\" />\n              <span>Recent Alerts</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-start space-x-3\">\n              <Clock className=\"h-5 w-5 text-orange-500 mt-0.5\" />\n              <div>\n                <p className=\"text-sm font-medium\">Fee Payment Overdue</p>\n                <p className=\"text-xs text-gray-500\">15 students have pending fees</p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-3\">\n              <UserX className=\"h-5 w-5 text-red-500 mt-0.5\" />\n              <div>\n                <p className=\"text-sm font-medium\">Low Attendance Alert</p>\n                <p className=\"text-xs text-gray-500\">Grade 9-B attendance below 75%</p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-3\">\n              <Star className=\"h-5 w-5 text-blue-500 mt-0.5\" />\n              <div>\n                <p className=\"text-sm font-medium\">New Teacher Review</p>\n                <p className=\"text-xs text-gray-500\">5 pending reviews to moderate</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Plus className=\"h-5 w-5 text-blue-600\" />\n              <span>Quick Actions</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center space-y-2\">\n                <Plus className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Add Student</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center space-y-2\">\n                <Building className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Create Class</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center space-y-2\">\n                <CreditCard className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Fee Structure</span>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col items-center justify-center space-y-2\">\n                <FileText className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Generate Report</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Activity */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Clock className=\"h-5 w-5 text-blue-600\" />\n              <span>Recent Activity</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                <UserCheck className=\"h-4 w-4 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium\">Grade 10 Math grades published</p>\n                <p className=\"text-xs text-gray-500\">2 hours ago</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                <Users className=\"h-4 w-4 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium\">New teacher registered: Ms. Wilson</p>\n                <p className=\"text-xs text-gray-500\">4 hours ago</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center\">\n                <DollarSign className=\"h-4 w-4 text-yellow-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium\">Fee payment received: $2,450</p>\n                <p className=\"text-xs text-gray-500\">6 hours ago</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7964},"client/src/components/parent/ParentDashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { TrendingUp, Calendar, Trophy, CreditCard, User, Users, Building, CalendarCheck, BookOpen, MessageCircle } from 'lucide-react';\nimport type { DashboardStats } from '@/types';\n\nexport default function ParentDashboard() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard/stats']\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"h-32 bg-gray-200 animate-pulse rounded-lg\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const statCards = [\n    {\n      title: 'Overall Average',\n      value: `${stats?.overallAverage || 87.3}%`,\n      icon: TrendingUp,\n      gradient: 'from-blue-600 to-purple-600'\n    },\n    {\n      title: 'Attendance',\n      value: `${stats?.attendanceRate || 96}%`,\n      icon: Calendar,\n      gradient: 'from-green-500 to-emerald-600'\n    },\n    {\n      title: 'Class Rank',\n      value: `${stats?.classRank || 5}th`,\n      icon: Trophy,\n      gradient: 'from-orange-500 to-red-500'\n    },\n    {\n      title: 'Due Amount',\n      value: '$125',\n      icon: CreditCard,\n      gradient: 'from-purple-600 to-pink-600'\n    }\n  ];\n\n  const feeStructure = [\n    { type: 'Tuition Fee', amount: '$500.00', dueDate: 'Dec 31, 2024', status: 'Paid' },\n    { type: 'Laboratory Fee', amount: '$75.00', dueDate: 'Dec 20, 2024', status: 'Pending' },\n    { type: 'Transport Fee', amount: '$50.00', dueDate: 'Dec 25, 2024', status: 'Pending' }\n  ];\n\n  const recentGrades = [\n    { subject: 'Mathematics', test: 'Unit Test 3', marks: '87/100', grade: 'A', remarks: 'Excellent improvement!' },\n    { subject: 'Physics', test: 'Lab Report', marks: '94/100', grade: 'A+', remarks: 'Outstanding work' },\n    { subject: 'English', test: 'Essay Assignment', marks: '82/100', grade: 'A-', remarks: 'Good creativity' }\n  ];\n\n  const recentMessages = [\n    { sender: 'Ms. Johnson', message: 'Emma showed great improvement in today\\'s math test.', timeAgo: '2 hours ago', type: 'teacher' },\n    { sender: 'School Administration', message: 'Parent-teacher meeting scheduled for Dec 22.', timeAgo: '1 day ago', type: 'admin' }\n  ];\n\n  const upcomingEvents = [\n    { event: 'Parent-Teacher Meeting', date: 'Dec 22, 2024 at 2:00 PM', timeLeft: '2 days' },\n    { event: 'Annual Sports Day', date: 'Jan 15, 2025', timeLeft: '3 weeks' },\n    { event: 'Final Exams Begin', date: 'Feb 1, 2025', timeLeft: '5 weeks' }\n  ];\n\n  const getFeeStatusVariant = (status: string) => {\n    return status === 'Paid' ? 'default' : 'destructive';\n  };\n\n  const getGradeBadgeVariant = (grade: string) => {\n    if (grade.startsWith('A')) return 'default';\n    if (grade.startsWith('B')) return 'secondary';\n    return 'outline';\n  };\n\n  const getEventBadgeVariant = (timeLeft: string) => {\n    if (timeLeft.includes('days')) return 'default';\n    if (timeLeft.includes('weeks')) return 'secondary';\n    return 'outline';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Child's Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {statCards.map((stat, index) => {\n          const Icon = stat.icon;\n          return (\n            <Card key={index} className=\"overflow-hidden\">\n              <CardContent className={`p-6 bg-gradient-to-r ${stat.gradient} text-white`}>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium opacity-90\">{stat.title}</p>\n                    <p className=\"text-3xl font-bold mt-2\">{stat.value}</p>\n                  </div>\n                  <Icon className=\"h-12 w-12 opacity-80\" />\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Child Profile */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <User className=\"h-5 w-5 text-blue-600\" />\n              <span>Child Profile</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <Avatar className=\"h-24 w-24 mx-auto\">\n              <AvatarImage src=\"https://images.unsplash.com/photo-1544717302-de2939b7ef71?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200\" />\n              <AvatarFallback>ED</AvatarFallback>\n            </Avatar>\n            <div>\n              <h3 className=\"text-lg font-semibold\">Emma Davis</h3>\n              <p className=\"text-sm text-gray-600\">Grade 10-A • Roll No: 2023045</p>\n              <p className=\"text-sm text-gray-600\">Date of Birth: March 15, 2009</p>\n            </div>\n            <Button variant=\"outline\" size=\"sm\">\n              <User className=\"h-4 w-4 mr-2\" />\n              Edit Profile\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Fee Management */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <CreditCard className=\"h-5 w-5 text-blue-600\" />\n              <span>Fee Management</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto mb-4\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Fee Type</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Due Date</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Action</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {feeStructure.map((fee, index) => (\n                    <TableRow key={index}>\n                      <TableCell className=\"font-medium\">{fee.type}</TableCell>\n                      <TableCell>{fee.amount}</TableCell>\n                      <TableCell>{fee.dueDate}</TableCell>\n                      <TableCell>\n                        <Badge variant={getFeeStatusVariant(fee.status)}>\n                          {fee.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {fee.status === 'Paid' ? (\n                          <Button size=\"sm\" variant=\"outline\">Receipt</Button>\n                        ) : (\n                          <Button size=\"sm\">Pay Now</Button>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n            <div className=\"text-right space-y-2\">\n              <p className=\"font-semibold\">Total Pending: $125.00</p>\n              <Button className=\"bg-green-600 hover:bg-green-700\">\n                <CreditCard className=\"h-4 w-4 mr-2\" />\n                Pay All Pending\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Academic Progress Trend */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n              <span>Academic Progress Trend</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64 flex items-center justify-center bg-gray-50 rounded-lg border-2 border-dashed border-gray-300\">\n              <div className=\"text-center text-gray-500\">\n                <TrendingUp className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-lg font-medium\">Progress Trend Chart</p>\n                <p className=\"text-sm\">Shows improvement over terms</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Messages */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <MessageCircle className=\"h-5 w-5 text-blue-600\" />\n              <span>Recent Messages</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {recentMessages.map((message, index) => (\n              <div key={index} className=\"flex items-start space-x-3\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                  message.type === 'teacher' ? 'bg-blue-100' : 'bg-green-100'\n                }`}>\n                  {message.type === 'teacher' ? (\n                    <User className={`h-4 w-4 ${message.type === 'teacher' ? 'text-blue-600' : 'text-green-600'}`} />\n                  ) : (\n                    <Building className=\"h-4 w-4 text-green-600\" />\n                  )}\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">{message.sender}</p>\n                  <p className=\"text-xs text-gray-600 mt-1\">{message.message}</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">{message.timeAgo}</p>\n                </div>\n              </div>\n            ))}\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-4\">\n              <MessageCircle className=\"h-4 w-4 mr-2\" />\n              View All Messages\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Recent Grades */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <BookOpen className=\"h-5 w-5 text-blue-600\" />\n              <span>Recent Grades</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Subject</TableHead>\n                    <TableHead>Test/Exam</TableHead>\n                    <TableHead>Marks</TableHead>\n                    <TableHead>Grade</TableHead>\n                    <TableHead>Teacher Remarks</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {recentGrades.map((grade, index) => (\n                    <TableRow key={index}>\n                      <TableCell className=\"font-medium\">{grade.subject}</TableCell>\n                      <TableCell>{grade.test}</TableCell>\n                      <TableCell>{grade.marks}</TableCell>\n                      <TableCell>\n                        <Badge variant={getGradeBadgeVariant(grade.grade)}>\n                          {grade.grade}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <span className=\"text-sm text-green-600\">{grade.remarks}</span>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Upcoming Events */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <CalendarCheck className=\"h-5 w-5 text-blue-600\" />\n              <span>Upcoming Events</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {upcomingEvents.map((event, index) => (\n              <div key={index} className=\"flex justify-between items-start\">\n                <div>\n                  <p className=\"text-sm font-medium\">{event.event}</p>\n                  <p className=\"text-xs text-gray-500\">{event.date}</p>\n                </div>\n                <Badge variant={getEventBadgeVariant(event.timeLeft)} className=\"ml-2\">\n                  {event.timeLeft}\n                </Badge>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12629},"client/src/components/student/StudentDashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { TrendingUp, Calendar, Trophy, CreditCard, CalendarDays, BookOpen, ListTodo, Star, Send } from 'lucide-react';\nimport type { DashboardStats } from '@/types';\n\nexport default function StudentDashboard() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard/stats']\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"h-32 bg-gray-200 animate-pulse rounded-lg\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const statCards = [\n    {\n      title: 'Overall Average',\n      value: `${stats?.overallAverage || 85.6}%`,\n      icon: TrendingUp,\n      gradient: 'from-blue-600 to-purple-600'\n    },\n    {\n      title: 'Attendance',\n      value: `${stats?.attendanceRate || 94}%`,\n      icon: Calendar,\n      gradient: 'from-green-500 to-emerald-600'\n    },\n    {\n      title: 'Class Rank',\n      value: `${stats?.classRank || 7}th`,\n      icon: Trophy,\n      gradient: 'from-orange-500 to-red-500'\n    },\n    {\n      title: 'Fee Status',\n      value: stats?.feeStatus || 'Paid',\n      icon: CreditCard,\n      gradient: 'from-purple-600 to-pink-600'\n    }\n  ];\n\n  const recentGrades = [\n    { subject: 'Mathematics', test: 'Unit Test 3', marks: '85/100', grade: 'A', date: 'Dec 15, 2024' },\n    { subject: 'Physics', test: 'Lab Report', marks: '92/100', grade: 'A+', date: 'Dec 12, 2024' },\n    { subject: 'English', test: 'Essay Assignment', marks: '78/100', grade: 'B+', date: 'Dec 10, 2024' },\n    { subject: 'Chemistry', test: 'Mid-term Exam', marks: '88/100', grade: 'A', date: 'Dec 8, 2024' }\n  ];\n\n  const todayClasses = [\n    { subject: 'Mathematics', time: '09:00 - 09:45', room: 'Room 201', status: 'Completed' },\n    { subject: 'Physics', time: '10:00 - 10:45', room: 'Lab 1', status: 'In Progress' },\n    { subject: 'English', time: '11:30 - 12:15', room: 'Room 105', status: 'Upcoming' }\n  ];\n\n  const pendingAssignments = [\n    { title: 'Chemistry Lab Report', dueDate: 'Dec 20, 2024', daysLeft: '2 days left', urgency: 'warning' },\n    { title: 'History Essay', dueDate: 'Dec 25, 2024', daysLeft: '1 week left', urgency: 'success' },\n    { title: 'Math Problem Set', dueDate: 'Dec 22, 2024', daysLeft: '4 days left', urgency: 'info' }\n  ];\n\n  const teachers = [\n    { id: '1', name: 'Ms. Sarah Johnson - Mathematics' },\n    { id: '2', name: 'Mr. David Wilson - Physics' },\n    { id: '3', name: 'Ms. Emily Brown - English' }\n  ];\n\n  const getGradeBadgeVariant = (grade: string) => {\n    if (grade.startsWith('A')) return 'default';\n    if (grade.startsWith('B')) return 'secondary';\n    return 'outline';\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'Completed': return 'default';\n      case 'In Progress': return 'default';\n      case 'Upcoming': return 'secondary';\n      default: return 'outline';\n    }\n  };\n\n  const getUrgencyBadgeVariant = (urgency: string) => {\n    switch (urgency) {\n      case 'warning': return 'destructive';\n      case 'success': return 'default';\n      case 'info': return 'secondary';\n      default: return 'outline';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Student Performance Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {statCards.map((stat, index) => {\n          const Icon = stat.icon;\n          return (\n            <Card key={index} className=\"overflow-hidden\">\n              <CardContent className={`p-6 bg-gradient-to-r ${stat.gradient} text-white`}>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium opacity-90\">{stat.title}</p>\n                    <p className=\"text-3xl font-bold mt-2\">{stat.value}</p>\n                  </div>\n                  <Icon className=\"h-12 w-12 opacity-80\" />\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Recent Grades */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <BookOpen className=\"h-5 w-5 text-blue-600\" />\n              <span>Recent Grades</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Subject</TableHead>\n                    <TableHead>Test/Exam</TableHead>\n                    <TableHead>Marks</TableHead>\n                    <TableHead>Grade</TableHead>\n                    <TableHead>Date</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {recentGrades.map((grade, index) => (\n                    <TableRow key={index}>\n                      <TableCell className=\"font-medium\">{grade.subject}</TableCell>\n                      <TableCell>{grade.test}</TableCell>\n                      <TableCell>{grade.marks}</TableCell>\n                      <TableCell>\n                        <Badge variant={getGradeBadgeVariant(grade.grade)}>\n                          {grade.grade}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{grade.date}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Today's Classes */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <CalendarDays className=\"h-5 w-5 text-blue-600\" />\n              <span>Today's Classes</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {todayClasses.map((classItem, index) => (\n              <div key={index} className=\"flex justify-between items-start\">\n                <div>\n                  <p className=\"text-sm font-medium\">{classItem.subject}</p>\n                  <p className=\"text-xs text-gray-500\">{classItem.time} • {classItem.room}</p>\n                </div>\n                <Badge variant={getStatusBadgeVariant(classItem.status)} className=\"ml-2\">\n                  {classItem.status}\n                </Badge>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Subject Performance Chart Placeholder */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n              <span>Subject Performance</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64 flex items-center justify-center bg-gray-50 rounded-lg border-2 border-dashed border-gray-300\">\n              <div className=\"text-center text-gray-500\">\n                <TrendingUp className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-lg font-medium\">Subject-wise Performance Chart</p>\n                <p className=\"text-sm\">Radar chart showing strengths/weaknesses</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Pending Assignments */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <ListTodo className=\"h-5 w-5 text-blue-600\" />\n              <span>Pending Assignments</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {pendingAssignments.map((assignment, index) => (\n              <div key={index} className=\"flex justify-between items-start\">\n                <div>\n                  <p className=\"text-sm font-medium\">{assignment.title}</p>\n                  <p className=\"text-xs text-gray-500\">Due: {assignment.dueDate}</p>\n                </div>\n                <Badge variant={getUrgencyBadgeVariant(assignment.urgency)} className=\"ml-2\">\n                  {assignment.daysLeft}\n                </Badge>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Teacher Review Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Star className=\"h-5 w-5 text-yellow-600\" />\n            <span>Submit Teacher Review</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"teacherSelect\">Select Teacher</Label>\n                <Select>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose a teacher...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {teachers.map((teacher) => (\n                      <SelectItem key={teacher.id} value={teacher.id}>\n                        {teacher.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"rating\">Rating</Label>\n                <Select>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select rating...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"5\">⭐⭐⭐⭐⭐ Excellent</SelectItem>\n                    <SelectItem value=\"4\">⭐⭐⭐⭐ Good</SelectItem>\n                    <SelectItem value=\"3\">⭐⭐⭐ Average</SelectItem>\n                    <SelectItem value=\"2\">⭐⭐ Below Average</SelectItem>\n                    <SelectItem value=\"1\">⭐ Poor</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"reviewComment\">Comments (Optional)</Label>\n              <Textarea\n                id=\"reviewComment\"\n                placeholder=\"Share your thoughts about this teacher...\"\n                rows={3}\n              />\n            </div>\n            <Button type=\"submit\" className=\"flex items-center space-x-2\">\n              <Send className=\"h-4 w-4\" />\n              <span>Submit Review</span>\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11377},"client/src/components/teacher/TeacherDashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Input } from '@/components/ui/input';\nimport { Users, Building, Star, Calendar, CalendarDays, Save, Upload } from 'lucide-react';\nimport type { DashboardStats } from '@/types';\n\nexport default function TeacherDashboard() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard/stats']\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"h-32 bg-gray-200 animate-pulse rounded-lg\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const statCards = [\n    {\n      title: 'My Students',\n      value: stats?.totalStudents || 156,\n      icon: Users,\n      gradient: 'from-blue-600 to-purple-600'\n    },\n    {\n      title: 'Classes',\n      value: 6,\n      icon: Building,\n      gradient: 'from-green-500 to-emerald-600'\n    },\n    {\n      title: 'Rating',\n      value: stats?.averageRating || '4.7',\n      icon: Star,\n      gradient: 'from-orange-500 to-red-500'\n    },\n    {\n      title: 'Attendance',\n      value: `${stats?.attendanceRate || 92}%`,\n      icon: Calendar,\n      gradient: 'from-purple-600 to-pink-600'\n    }\n  ];\n\n  const todaySchedule = [\n    { time: '09:00 - 09:45', class: 'Grade 10-A', subject: 'Mathematics', room: 'Room 201', action: 'Take Attendance' },\n    { time: '10:00 - 10:45', class: 'Grade 9-B', subject: 'Mathematics', room: 'Room 201', action: 'Take Attendance' },\n    { time: '11:30 - 12:15', class: 'Grade 10-C', subject: 'Mathematics', room: 'Room 201', action: 'Submit Grades' }\n  ];\n\n  const gradeEntryData = [\n    { name: 'Emily Johnson', rollNo: '2023001', marks: 85, maxMarks: 100, grade: 'A', status: 'completed' },\n    { name: 'Michael Chen', rollNo: '2023002', marks: 92, maxMarks: 100, grade: 'A+', status: 'completed' },\n    { name: 'Sarah Williams', rollNo: '2023003', marks: null, maxMarks: 100, grade: '-', status: 'pending' }\n  ];\n\n  const recentReviews = [\n    { student: 'Anonymous Student', comment: 'Great teacher! Makes math fun and easy to understand.', class: 'Grade 10-A', rating: 5.0, timeAgo: '2 days ago' },\n    { student: 'Anonymous Student', comment: 'Always patient and helpful during class.', class: 'Grade 9-B', rating: 4.8, timeAgo: '5 days ago' }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Teacher KPIs */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {statCards.map((stat, index) => {\n          const Icon = stat.icon;\n          return (\n            <Card key={index} className=\"overflow-hidden\">\n              <CardContent className={`p-6 bg-gradient-to-r ${stat.gradient} text-white`}>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium opacity-90\">{stat.title}</p>\n                    <p className=\"text-3xl font-bold mt-2\">{stat.value}</p>\n                  </div>\n                  <Icon className=\"h-12 w-12 opacity-80\" />\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Today's Schedule */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <CalendarDays className=\"h-5 w-5 text-blue-600\" />\n              <span>Today's Schedule</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Time</TableHead>\n                    <TableHead>Class</TableHead>\n                    <TableHead>Subject</TableHead>\n                    <TableHead>Room</TableHead>\n                    <TableHead>Action</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {todaySchedule.map((schedule, index) => (\n                    <TableRow key={index}>\n                      <TableCell className=\"font-medium\">{schedule.time}</TableCell>\n                      <TableCell>{schedule.class}</TableCell>\n                      <TableCell>{schedule.subject}</TableCell>\n                      <TableCell>{schedule.room}</TableCell>\n                      <TableCell>\n                        <Button size=\"sm\" variant=\"outline\">\n                          {schedule.action}\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Reviews */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Star className=\"h-5 w-5 text-yellow-600\" />\n              <span>Recent Reviews</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {recentReviews.map((review, index) => (\n              <div key={index} className=\"space-y-2\">\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">{review.student}</p>\n                    <p className=\"text-xs text-gray-600 mt-1\">\"{review.comment}\"</p>\n                    <p className=\"text-xs text-gray-500 mt-1\">{review.class} • {review.timeAgo}</p>\n                  </div>\n                  <Badge variant=\"secondary\" className=\"ml-2\">\n                    ★ {review.rating}\n                  </Badge>\n                </div>\n                {index < recentReviews.length - 1 && <hr className=\"my-3\" />}\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Grade Entry */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Star className=\"h-5 w-5 text-blue-600\" />\n            <span>Quick Grade Entry - Mathematics Test</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto mb-4\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Student Name</TableHead>\n                  <TableHead>Roll No.</TableHead>\n                  <TableHead>Marks Obtained</TableHead>\n                  <TableHead>Max Marks</TableHead>\n                  <TableHead>Grade</TableHead>\n                  <TableHead>Status</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {gradeEntryData.map((student, index) => (\n                  <TableRow key={index}>\n                    <TableCell className=\"font-medium\">{student.name}</TableCell>\n                    <TableCell>{student.rollNo}</TableCell>\n                    <TableCell>\n                      <Input\n                        type=\"number\"\n                        max={student.maxMarks}\n                        defaultValue={student.marks || ''}\n                        placeholder=\"Enter marks\"\n                        className=\"w-24\"\n                      />\n                    </TableCell>\n                    <TableCell>{student.maxMarks}</TableCell>\n                    <TableCell>\n                      <Badge variant={student.grade === '-' ? 'secondary' : 'default'}>\n                        {student.grade}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {student.status === 'completed' ? (\n                        <span className=\"text-green-600\">✓</span>\n                      ) : (\n                        <span className=\"text-yellow-600\">⏳</span>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          <div className=\"flex space-x-4\">\n            <Button className=\"flex items-center space-x-2\">\n              <Save className=\"h-4 w-4\" />\n              <span>Save Grades</span>\n            </Button>\n            <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n              <Upload className=\"h-4 w-4\" />\n              <span>Bulk Upload CSV</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8900},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}